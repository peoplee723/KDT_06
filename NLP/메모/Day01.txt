Day01

이미지 -> 정규화 (크기, 색, 통일) -> 특징추출->학습

형태소 분석

- 코퍼스
수집한 텍스트

- 토큰
분석하는 단위 (문장 또는 단어)

=>토큰화
문장을 품사별로 분류 -> 필요없는 품사 제거
=>정규화
표현방법 다른 단어 통합 (=단위 통합)
=>표제어 추출
단어의 원형을 찾아서 단어 개수 줄이기
(어간과 접사 분리)
=>어간 추출
규칙만 보고 어미 자르기
(단순화, but 정확하지 않음)

===> 전/후로 정제 작업 필요
	- 불용어 제거, 빈도 기반 제거, 짧은 단어 제거
	- ^^, : ( ,  : ) ㅋㅋㅋ, ㅜㅜㅜ, ㅠㅠㅠ, ㅎㅎㅎ...
	-
	불용어 리스트 제거 -> punctuation 제거 가 편할듯?

- 어휘 집합(어휘 사전)
수집한 문제영역 전체 단어 집합


정규 표현식
전부 외울 수 없다
re.match() -> 문자열에 입력값이 있는지 판단(제시형식, 입력문자)
		기본
		->^문자 -> 시작
		->문자$ -> 끝
		->문자1|문자 -> or
		범위
		-> [] =범위 표현 ([0-9]사용가능)	
		-> [^OO] = 제외
		-> 문자+ 1개 이상
		-> 문자* 0개 이상
		-> 문자? 0or1개
		->.  -> .위치에 문자1개 유무
		->문자{숫자} -> 문자 숫자만큼 있는지
		-> 특수문자 판단 -> \+ 특수문자
		- \d -> 숫자
		- \D -> 숫자제외한 모든 문자
		- \w -> 영문(대,소), 숫자, 밑줄
		- \W -> 영문(대,소), 숫자, 밑줄 제외한 모든 문자
		공백
		- ' ', \s, \S
		객체로 만들기
		re.compile() -> 메서드로 활용
		그룹 (변수.group())
		(패턴) -> 매칭된 문자열 인덱싱으로 사용 가능 ()또는 (0)=전체
		변수.groups() 
		-> 튜플 형태로 반환
		이름짓기 -> (?P<이름>정규표현식)
		re.findall()	
		-> 매칭 리스트로 반환
		바꾸기
		re.sub(패턴, 바꿀문자, 입력문자, 바꿀횟수(기본=전부))
				=>함수도 가능
		입력문자= \\숫자 -> 순서 바꾸기
		
		